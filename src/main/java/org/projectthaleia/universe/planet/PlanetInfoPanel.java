/*
 * The MIT License
 *
 * Copyright 2012 Simon Hardijanto.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.projectthaleia.universe.planet;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.projectthaleia.colony.Colony;
import org.projectthaleia.factions.Empire;

/**
 *
 * @author Simon Hardijanto
 */
public class PlanetInfoPanel extends javax.swing.JPanel
{

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        starSystemNameLbl = new javax.swing.JLabel();
        dataPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        radiusLbl = new javax.swing.JLabel();
        massLbl = new javax.swing.JLabel();
        gravityLbl = new javax.swing.JLabel();
        densityLbl = new javax.swing.JLabel();
        orbitPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        semiMajorAxisLbl = new javax.swing.JLabel();
        eccentricityLbl = new javax.swing.JLabel();
        sidericPeriodLbl = new javax.swing.JLabel();
        colonyBtn = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(220, 600));

        starSystemNameLbl.setText("Name");

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data"));

        jLabel4.setText("Radius:");

        jLabel5.setText("Mass:");

        jLabel6.setText("Gravity:");

        jLabel7.setText("Density:");

        radiusLbl.setText("0");

        massLbl.setText("0");

        gravityLbl.setText("0");

        densityLbl.setText("0");

        javax.swing.GroupLayout dataPanelLayout = new javax.swing.GroupLayout(dataPanel);
        dataPanel.setLayout(dataPanelLayout);
        dataPanelLayout.setHorizontalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radiusLbl)
                    .addComponent(massLbl)
                    .addComponent(gravityLbl)
                    .addComponent(densityLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dataPanelLayout.setVerticalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(radiusLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(massLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(gravityLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(densityLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        orbitPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Orbit"));

        jLabel1.setText("Eccentricity:");

        jLabel2.setText("Orbital period:");

        jLabel3.setText("Semimajor axis:");

        semiMajorAxisLbl.setText("0");

        eccentricityLbl.setText("0");

        sidericPeriodLbl.setText("0");

        javax.swing.GroupLayout orbitPanelLayout = new javax.swing.GroupLayout(orbitPanel);
        orbitPanel.setLayout(orbitPanelLayout);
        orbitPanelLayout.setHorizontalGroup(
            orbitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orbitPanelLayout.createSequentialGroup()
                .addGroup(orbitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orbitPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(orbitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)))
                    .addGroup(orbitPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orbitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(semiMajorAxisLbl)
                    .addComponent(eccentricityLbl)
                    .addComponent(sidericPeriodLbl))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        orbitPanelLayout.setVerticalGroup(
            orbitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orbitPanelLayout.createSequentialGroup()
                .addGroup(orbitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(semiMajorAxisLbl))
                .addGap(6, 6, 6)
                .addGroup(orbitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(eccentricityLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orbitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sidericPeriodLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        colonyBtn.setText("Go to colony...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(starSystemNameLbl)
                        .addComponent(orbitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(colonyBtn))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(starSystemNameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orbitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(colonyBtn)
                .addContainerGap(331, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton colonyBtn;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JLabel densityLbl;
    private javax.swing.JLabel eccentricityLbl;
    private javax.swing.JLabel gravityLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel massLbl;
    private javax.swing.JPanel orbitPanel;
    private javax.swing.JLabel radiusLbl;
    private javax.swing.JLabel semiMajorAxisLbl;
    private javax.swing.JLabel sidericPeriodLbl;
    private javax.swing.JLabel starSystemNameLbl;
    // End of variables declaration//GEN-END:variables

  public void setPlanet(final Planet _planet, final Empire _viewingEmpire)
  {
    this.semiMajorAxisLbl.setText("" + _planet.getSemiMajorAxis() + " km");
    this.eccentricityLbl.setText("" + _planet.getEccentricity());
    this.sidericPeriodLbl.setText("" + _planet.getSidericPeriod() + " d");
    
    this.setColonyBtnText(_planet, _viewingEmpire);
  }

  //---------------- PROTECTED ----------------

  //-------------- PACKAGE PRIVATE ------------
  /**
   * Creates new form StarSystemInfoPanel
   */
  PlanetInfoPanel()
  {
    initComponents();
    this.colonyBtn.addActionListener(new ColonyBtnListener());
  }

  /**
   * Registers a listener for clicks on the found colony button. There can 
   * only be one.
   * @param _listener the listener receiving the event
   */
  void registerFoundColonyBtnListener(final ActionListener _listener)
  {
    this.foundColonyBtnListener = _listener;
  }

  /**
   * Registers a listener for clicks on the show colony button. There can 
   * only be one.
   * @param _listener the listener receiving the event
   */
  void registerShowColonyBtnListener(final ActionListener _listener)
  {
    this.showColonyBtnListener = _listener;
  }

  //----------------  PRIVATE  ----------------
  private ActionListener foundColonyBtnListener;
  private ActionListener showColonyBtnListener;
  private boolean hasColony;
  
  private void setColonyBtnText(final Planet _planet, final Empire _viewingEmpire)
  {
    String txt = "Found Colony";
    Colony colony = _planet.getColonyOf(_viewingEmpire);
    if (colony != null) {
      txt = "Go to Colony";
      this.hasColony = true;
    } else {
      this.hasColony = false;
    }
    this.colonyBtn.setText(txt);
  }

  /**
   * Decides which registered listener to call.
   */
  private class ColonyBtnListener implements ActionListener
  {
    @Override
    public void actionPerformed(final ActionEvent _e)
    {
      if (hasColony) {
        if (showColonyBtnListener != null) {
          showColonyBtnListener.actionPerformed(_e);
        }
      } else {
        if (foundColonyBtnListener != null) {
          foundColonyBtnListener.actionPerformed(_e);
        }
      }
    }
  }
}
