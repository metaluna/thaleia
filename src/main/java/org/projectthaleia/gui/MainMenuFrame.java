/*
 * The MIT License
 *
 * Copyright 2011 Simon Hardijanto
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.projectthaleia.gui;

import com.google.inject.Inject;
import java.awt.event.WindowEvent;
import org.projectthaleia.factions.Empire;
import org.projectthaleia.factions.EmpireFactory;
import org.projectthaleia.factions.Species;
import org.projectthaleia.factions.SpeciesFactory;
import org.projectthaleia.game.Game;
import org.projectthaleia.game.GameFactory;
import org.projectthaleia.game.GameLoop;
import org.projectthaleia.game.GameLoopFactory;
import org.projectthaleia.game.graphics.GameFrame;
import org.projectthaleia.game.graphics.GameFrameFactory;
import org.projectthaleia.game.graphics.GameGraphics;
import org.projectthaleia.game.graphics.GameGraphicsFactory;
import org.projectthaleia.spaceprobes.SpaceProbeGroup;
import org.projectthaleia.universe.StarSystem;

/**
 *
 * @author Simon Hardijanto
 */
public class MainMenuFrame extends javax.swing.JFrame
{
  /** Creates new form MainFrame */
  @Inject
  public MainMenuFrame( final GameFactory _gameFactory,
                        final GameGraphicsFactory _gameGraphicsFactory,
                        final GameFrameFactory _gameFrameFactory,
                        final GameLoopFactory _gameLoopFactory,
                        final EmpireFactory _empireFactory,
                        final SpeciesFactory _speciesFactory)
  {
    this.gameFactory = _gameFactory;
    this.gameGraphicsFactory = _gameGraphicsFactory;
    this.gameFrameFactory = _gameFrameFactory;
    this.gameLoopFactory = _gameLoopFactory;
    this.empireFactory = _empireFactory;
    this.speciesFactory = _speciesFactory;
    this.initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newGameBtn = new javax.swing.JButton();
        loadGameBtn = new javax.swing.JButton();
        quitGameBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project Thaleia");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        newGameBtn.setMnemonic(java.util.ResourceBundle.getBundle("main_menu_en_US").getString("NEW GAME BUTTON MNEMONIC").charAt(0));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("main_menu_en_US"); // NOI18N
        newGameBtn.setText(bundle.getString("NEW GAME BUTTON")); // NOI18N
        newGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameBtnActionPerformed(evt);
            }
        });

        loadGameBtn.setMnemonic(java.util.ResourceBundle.getBundle("main_menu_en_US").getString("LOAD GAME BUTTON MNEMONIC").charAt(0));
        loadGameBtn.setText(bundle.getString("LOAD GAME BUTTON")); // NOI18N
        loadGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGameBtnActionPerformed(evt);
            }
        });

        quitGameBtn.setMnemonic(java.util.ResourceBundle.getBundle("main_menu_en_US").getString("QUIT MENU BUTTON MNEMONIC").charAt(0));
        quitGameBtn.setText(bundle.getString("QUIT MENU BUTTON")); // NOI18N
        quitGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitGameBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadGameBtn, javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quitGameBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                            .addComponent(newGameBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))))
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(newGameBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadGameBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(quitGameBtn)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameBtnActionPerformed
      this.newGame();
    }//GEN-LAST:event_newGameBtnActionPerformed

    private void loadGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGameBtnActionPerformed
      // TODO add button handler to load a game
    }//GEN-LAST:event_loadGameBtnActionPerformed

    private void quitGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitGameBtnActionPerformed
      this.exit();
    }//GEN-LAST:event_quitGameBtnActionPerformed

  //---------------- PRIVATE ----------------
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton loadGameBtn;
    private javax.swing.JButton newGameBtn;
    private javax.swing.JButton quitGameBtn;
    // End of variables declaration//GEN-END:variables

  private final GameFactory gameFactory;
  private final GameGraphicsFactory gameGraphicsFactory;
  private final GameLoopFactory gameLoopFactory;
  private final GameFrameFactory gameFrameFactory;
  private final EmpireFactory empireFactory;
  private final SpeciesFactory speciesFactory;

  private void newGame()
  {
    final Species mainSpecies = this.speciesFactory.create();
    final StarSystem homeSystem = StarSystem.generateStarSystem();
    homeSystem.addSpaceProbeGroup(SpaceProbeGroup.generateSpaceProbeGroup());
    final Empire empire = this.empireFactory.create(mainSpecies, homeSystem);
    final Game game = this.gameFactory.newGame(empire);
    final GameGraphics gameGraphics = this.gameGraphicsFactory.create(game);
    final GameFrame gameFrame = this.gameFrameFactory.create(gameGraphics);
    final GameLoop gameLoop = this.gameLoopFactory.create(game, gameFrame.getUniversePanel());
    
    gameFrame.addWindowListener(gameGraphics);

    gameFrame.setVisible(true);
    this.setVisible(false);
    
    new Thread(gameLoop).start();
  }
  
  private void exit()
  {
    this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
  }
}
