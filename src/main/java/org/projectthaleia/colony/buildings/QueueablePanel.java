/*
 * The MIT License
 *
 * Copyright 2012 Simon Hardijanto.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.projectthaleia.colony.buildings;

import com.google.inject.Inject;
import com.google.inject.assistedinject.Assisted;
import java.awt.event.ItemListener;
import java.text.DateFormat;
import java.util.Date;

/**
 *
 * @author Simon Hardijanto
 */
public class QueueablePanel extends javax.swing.JPanel implements ItemListener
{
  //---------------- PROTECTED ----------------

  //-------------- PACKAGE PRIVATE ------------

  /**
   * Creates new form QueueablePanel
   */
  @Inject
  QueueablePanel(@Assisted final IQueueable _queueable)
  {
    this.queueable = _queueable;
    
    initComponents();
    
    this.updateFields();
  }

  //----------------  PRIVATE  ----------------
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productionLockCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        pauseBtn = new javax.swing.JButton();
        dateFinishedLbl = new javax.swing.JLabel();
        countSpinner = new javax.swing.JSpinner();
        buildableNameLbl = new javax.swing.JLabel();
        productionPercentageSpinner = new javax.swing.JSpinner();
        upBtn = new javax.swing.JButton();
        downBtn = new javax.swing.JButton();

        productionLockCheckBox.setText("locked");
        productionLockCheckBox.setToolTipText("Check this to lock the percentage of production output.");
        productionLockCheckBox.addItemListener(this);

        jLabel1.setText("x");

        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jlfgr-1_0/toolbarButtonGraphics/general/Delete16.gif"))); // NOI18N
        deleteBtn.setToolTipText("Delete this production command.");

        jLabel2.setText("%");

        pauseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jlfgr-1_0/toolbarButtonGraphics/media/Pause16.gif"))); // NOI18N
        pauseBtn.setToolTipText("Pause/unpause this production command.");

        dateFinishedLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateFinishedLbl.setText("01.01.2050");
        dateFinishedLbl.setToolTipText("Days until finished: 0");

        countSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        countSpinner.setToolTipText("Enter the number of buildings of this type you want to be produced.");

        buildableNameLbl.setText("Building");
        buildableNameLbl.setName("");

        productionPercentageSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 1, 100, 1));
        productionPercentageSpinner.setToolTipText("Change this to assign a different percentage of factories to the production of this building type.");

        upBtn.setText("Up");
        upBtn.setMargin(new java.awt.Insets(2, 2, 2, 2));

        downBtn.setText("Down");
        downBtn.setMargin(new java.awt.Insets(2, 2, 2, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(upBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buildableNameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateFinishedLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productionPercentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productionLockCheckBox)
                .addGap(8, 8, 8)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pauseBtn)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateFinishedLbl)
                        .addComponent(productionPercentageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(productionLockCheckBox)
                        .addComponent(countSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(buildableNameLbl)
                        .addComponent(downBtn)
                        .addComponent(upBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deleteBtn, pauseBtn});

    }

    // Code for dispatching events from components to event handlers.

    public void itemStateChanged(java.awt.event.ItemEvent evt) {
        if (evt.getSource() == productionLockCheckBox) {
            QueueablePanel.this.productionLockCheckBoxItemStateChanged(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

  private void productionLockCheckBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_productionLockCheckBoxItemStateChanged
  {//GEN-HEADEREND:event_productionLockCheckBoxItemStateChanged
    productionPercentageSpinner.setEnabled(!productionLockCheckBox.isSelected());
  }//GEN-LAST:event_productionLockCheckBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel buildableNameLbl;
    private javax.swing.JSpinner countSpinner;
    private javax.swing.JLabel dateFinishedLbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton downBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton pauseBtn;
    private javax.swing.JCheckBox productionLockCheckBox;
    private javax.swing.JSpinner productionPercentageSpinner;
    private javax.swing.JButton upBtn;
    // End of variables declaration//GEN-END:variables
    
  private final IQueueable queueable;

  private void updateFields()
  {
    this.buildableNameLbl.setText(this.queueable.getProduct().getName());
    this.countSpinner.getModel().setValue(this.queueable.getAmount());
    
    if (this.queueable.isActive()) {
      this.dateFinishedLbl.setText(this.convertDate(this.queueable.getFinishedDate()));
      this.productionPercentageSpinner.getModel().setValue(this.queueable.getProductionPercentage()*100);
      this.productionLockCheckBox.setSelected(this.queueable.isProductionPercentageLocked());
    } else {
      this.dateFinishedLbl.setText("---");
    }
    this.enableComponents(this.queueable.isActive());
  }
  
  private String convertDate(final Date _date)
  {
    String result;
    DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.SHORT);
    result = dateFormat.format(_date);
    return result.toString();
  }
  
  private void enableComponents(final boolean _isActive)
  {
    this.upBtn.setVisible(!_isActive);
    this.downBtn.setVisible(!_isActive);
    this.productionPercentageSpinner.setEnabled(_isActive);
    this.productionLockCheckBox.setEnabled(_isActive);
    this.pauseBtn.setVisible(_isActive);
  }
}
